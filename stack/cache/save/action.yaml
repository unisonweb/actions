name: save stack cache
description: save ~/.stack and .stack-work caches on Linux, macOS, and Windows

inputs:
  cache-prefix:
    description: The cache prefix to use for `~/.stack`, e.g. "release" or "ci"
    required: true
  work-cache-prefix:
    description: The cache prefix to use for `**/.stack-work`, defaults to the same as `cache-prefix`
    required: false
  stack-yaml-dir:
    description: The directory to search for `stack.yaml`
    required: false
    default: '.'

runs:
  using: composite
  steps:
    - name: set default work cache prefix
      shell: bash
      run: |
        if [ -z "${{inputs.work-cache-prefix}}" ]; then
          echo "work-cache-prefix=${{inputs.cache-prefix}}" >> "$GITHUB_ENV"
        else
          echo "work-cache-prefix=${{inputs.work-cache-prefix}}" >> "$GITHUB_ENV"
        fi
        echo github.action_path=${{github.action_path}}

    - name: check stack caches
      id: check-stack
      uses: ./stack/cache/restore
      with:
        cache-prefix: ${{inputs.cache-prefix}}
        work-cache-prefix: ${{env.work-cache-prefix}}
        stack-yaml-dir: ${{inputs.stack-yaml-dir}}
        lookup-only: true

    # The number towards the beginning of the cache keys allow you to manually avoid using a previous cache.
    # GitHub will automatically delete caches that haven't been accessed in 7 days, but there is no way to
    # purge one manually.
    - name: record stackage resolver
      shell: bash
      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#environment-files
      # looks for `resolver: nightly-yyyy-mm-dd` or `resolver: lts-xx.yy` in `stack.yaml` and splits it into
      # `nightly` or `lts-xx`.  the whole resolver string is put into $resolver as a backup cache key
      # ${{ env.resolver_short }}
      # ${{ env.resolver }}
      run: |
        grep resolver ${{inputs.stack-yaml-dir}}/stack.yaml | awk '{ x="resolver_short="; if (split($2,a,"-") > 2) print x a[1]; else {split($2,b,"."); print x b[1]}}' >> "$GITHUB_ENV"
        grep resolver ${{inputs.stack-yaml-dir}}/stack.yaml | awk '{print "resolver="$2}' >> "$GITHUB_ENV"

    - name: save ~/.stack (non-Windows)
      if: runner.os != 'Windows' && steps.check-stack.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: ~/.stack
        key: ${{inputs.cache-prefix}}-stack-${{runner.os}}_${{env.resolver}}-${{hashFiles('**/stack.yaml', '**/package.yaml')}}

    - name: save ~/.stack (Windows)
      if: runner.os == 'Windows' && steps.check-stack.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: |
          C:\Users\runneradmin\AppData\Roaming\stack
          C:\Users\runneradmin\AppData\Local\Programs\stack
        key: ${{inputs.cache-prefix}}-stack-${{runner.os}}_${{env.resolver}}-${{hashFiles('**/stack.yaml', '**/package.yaml')}}

    - name: save .stack-work
      if: steps.check-stack.outputs.work-cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: |
          **/.stack-work
        key: ${{env.work-cache-prefix}}-stack-work-${{runner.os}}_${{env.resolver}}-${{hashFiles('**/stack.yaml', '**/package.yaml')}}-${{hashFiles('**/*.hs')}}
